// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: goods.proto

package goodsclient

import (
	"context"

	"shop/goods_gozero/goods"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BannerListResponse         = goods.BannerListResponse
	BannerRequest              = goods.BannerRequest
	BannerResponse             = goods.BannerResponse
	BatchCategoryInfoRequest   = goods.BatchCategoryInfoRequest
	BatchGoodsIdInfo           = goods.BatchGoodsIdInfo
	BrandFilterRequest         = goods.BrandFilterRequest
	BrandInfoResponse          = goods.BrandInfoResponse
	BrandListResponse          = goods.BrandListResponse
	BrandRequest               = goods.BrandRequest
	CategoryBrandFilterRequest = goods.CategoryBrandFilterRequest
	CategoryBrandListResponse  = goods.CategoryBrandListResponse
	CategoryBrandRequest       = goods.CategoryBrandRequest
	CategoryBrandResponse      = goods.CategoryBrandResponse
	CategoryBriefInfoResponse  = goods.CategoryBriefInfoResponse
	CategoryFilterRequest      = goods.CategoryFilterRequest
	CategoryInfoRequest        = goods.CategoryInfoRequest
	CategoryInfoResponse       = goods.CategoryInfoResponse
	CategoryListRequest        = goods.CategoryListRequest
	CategoryListResponse       = goods.CategoryListResponse
	CreateGoodsInfo            = goods.CreateGoodsInfo
	DeleteCategoryRequest      = goods.DeleteCategoryRequest
	DeleteGoodsInfo            = goods.DeleteGoodsInfo
	Empty                      = goods.Empty
	FilterRequest              = goods.FilterRequest
	GoodInfoRequest            = goods.GoodInfoRequest
	GoodsFilterRequest         = goods.GoodsFilterRequest
	GoodsInfoResponse          = goods.GoodsInfoResponse
	GoodsListResponse          = goods.GoodsListResponse
	GoodsReduceRequest         = goods.GoodsReduceRequest
	QueryCategoryRequest       = goods.QueryCategoryRequest
	SubCategoryListResponse    = goods.SubCategoryListResponse

	Goods interface {
		// 商品接口
		GoodsList(ctx context.Context, in *GoodsFilterRequest, opts ...grpc.CallOption) (*GoodsListResponse, error)
		// 现在用户提交订单有多个商品，你得批量查询商品的信息吧
		BatchGetGoods(ctx context.Context, in *BatchGoodsIdInfo, opts ...grpc.CallOption) (*GoodsListResponse, error)
		CreateGoods(ctx context.Context, in *CreateGoodsInfo, opts ...grpc.CallOption) (*GoodsInfoResponse, error)
		DeleteGoods(ctx context.Context, in *DeleteGoodsInfo, opts ...grpc.CallOption) (*Empty, error)
		UpdateGoods(ctx context.Context, in *CreateGoodsInfo, opts ...grpc.CallOption) (*Empty, error)
		GetGoodsDetail(ctx context.Context, in *GoodInfoRequest, opts ...grpc.CallOption) (*GoodsInfoResponse, error)
		// 商品分类
		GetAllCategorysList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CategoryListResponse, error)
		// 获取子分类
		GetSubCategory(ctx context.Context, in *CategoryListRequest, opts ...grpc.CallOption) (*SubCategoryListResponse, error)
		CreateCategory(ctx context.Context, in *CategoryInfoRequest, opts ...grpc.CallOption) (*CategoryInfoResponse, error)
		DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*Empty, error)
		UpdateCategory(ctx context.Context, in *CategoryInfoRequest, opts ...grpc.CallOption) (*Empty, error)
		// 品牌
		BrandList(ctx context.Context, in *BrandFilterRequest, opts ...grpc.CallOption) (*BrandListResponse, error)
		CreateBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandInfoResponse, error)
		DeleteBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*Empty, error)
		UpdateBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*Empty, error)
		// 轮播图
		BannerList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BannerListResponse, error)
		CreateBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error)
		DeleteBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*Empty, error)
		UpdateBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*Empty, error)
		// 品牌分类
		CategoryBrandList(ctx context.Context, in *CategoryBrandFilterRequest, opts ...grpc.CallOption) (*CategoryBrandListResponse, error)
		// 通过category获取brands
		GetCategoryBrandList(ctx context.Context, in *CategoryInfoRequest, opts ...grpc.CallOption) (*BrandListResponse, error)
		CreateCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...grpc.CallOption) (*CategoryBrandResponse, error)
		DeleteCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...grpc.CallOption) (*Empty, error)
		UpdateCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultGoods struct {
		cli zrpc.Client
	}
)

func NewGoods(cli zrpc.Client) Goods {
	return &defaultGoods{
		cli: cli,
	}
}

// 商品接口
func (m *defaultGoods) GoodsList(ctx context.Context, in *GoodsFilterRequest, opts ...grpc.CallOption) (*GoodsListResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.GoodsList(ctx, in, opts...)
}

// 现在用户提交订单有多个商品，你得批量查询商品的信息吧
func (m *defaultGoods) BatchGetGoods(ctx context.Context, in *BatchGoodsIdInfo, opts ...grpc.CallOption) (*GoodsListResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.BatchGetGoods(ctx, in, opts...)
}

func (m *defaultGoods) CreateGoods(ctx context.Context, in *CreateGoodsInfo, opts ...grpc.CallOption) (*GoodsInfoResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.CreateGoods(ctx, in, opts...)
}

func (m *defaultGoods) DeleteGoods(ctx context.Context, in *DeleteGoodsInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.DeleteGoods(ctx, in, opts...)
}

func (m *defaultGoods) UpdateGoods(ctx context.Context, in *CreateGoodsInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.UpdateGoods(ctx, in, opts...)
}

func (m *defaultGoods) GetGoodsDetail(ctx context.Context, in *GoodInfoRequest, opts ...grpc.CallOption) (*GoodsInfoResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.GetGoodsDetail(ctx, in, opts...)
}

// 商品分类
func (m *defaultGoods) GetAllCategorysList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CategoryListResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.GetAllCategorysList(ctx, in, opts...)
}

// 获取子分类
func (m *defaultGoods) GetSubCategory(ctx context.Context, in *CategoryListRequest, opts ...grpc.CallOption) (*SubCategoryListResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.GetSubCategory(ctx, in, opts...)
}

func (m *defaultGoods) CreateCategory(ctx context.Context, in *CategoryInfoRequest, opts ...grpc.CallOption) (*CategoryInfoResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.CreateCategory(ctx, in, opts...)
}

func (m *defaultGoods) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.DeleteCategory(ctx, in, opts...)
}

func (m *defaultGoods) UpdateCategory(ctx context.Context, in *CategoryInfoRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.UpdateCategory(ctx, in, opts...)
}

// 品牌
func (m *defaultGoods) BrandList(ctx context.Context, in *BrandFilterRequest, opts ...grpc.CallOption) (*BrandListResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.BrandList(ctx, in, opts...)
}

func (m *defaultGoods) CreateBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*BrandInfoResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.CreateBrand(ctx, in, opts...)
}

func (m *defaultGoods) DeleteBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.DeleteBrand(ctx, in, opts...)
}

func (m *defaultGoods) UpdateBrand(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.UpdateBrand(ctx, in, opts...)
}

// 轮播图
func (m *defaultGoods) BannerList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BannerListResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.BannerList(ctx, in, opts...)
}

func (m *defaultGoods) CreateBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.CreateBanner(ctx, in, opts...)
}

func (m *defaultGoods) DeleteBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.DeleteBanner(ctx, in, opts...)
}

func (m *defaultGoods) UpdateBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.UpdateBanner(ctx, in, opts...)
}

// 品牌分类
func (m *defaultGoods) CategoryBrandList(ctx context.Context, in *CategoryBrandFilterRequest, opts ...grpc.CallOption) (*CategoryBrandListResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.CategoryBrandList(ctx, in, opts...)
}

// 通过category获取brands
func (m *defaultGoods) GetCategoryBrandList(ctx context.Context, in *CategoryInfoRequest, opts ...grpc.CallOption) (*BrandListResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.GetCategoryBrandList(ctx, in, opts...)
}

func (m *defaultGoods) CreateCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...grpc.CallOption) (*CategoryBrandResponse, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.CreateCategoryBrand(ctx, in, opts...)
}

func (m *defaultGoods) DeleteCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.DeleteCategoryBrand(ctx, in, opts...)
}

func (m *defaultGoods) UpdateCategoryBrand(ctx context.Context, in *CategoryBrandRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := goods.NewGoodsClient(m.cli.Conn())
	return client.UpdateCategoryBrand(ctx, in, opts...)
}
